#include <sstream>
#include <iostream>
#include <string>
#include <cassert>
#include <fstream>

#include "util.h"
#include "error.h"
#include "x86_64.h"
#include "ast.h"

#define MAX_DIGITS 32

typedef struct{
    ecmp_operation op_enum;
    std::string asm_name;
    std::string opposite_asm_name;
}cmp_operation;

const cmp_operation cmp_operation_structs[CMP_OPERATION_ENUM_END] = {
{EQUAL,         "je",   "jne"},
{NOT_EQUAL,     "jne",  "je"},
{LESS,          "jl",   "jge"},
{LESS_OR_EQ,    "jle",  "jg"},
{GREATER,       "jg",   "jle"},
{GREATER_OR_EQ, "jge",  "jl"},
};

void arithmetic_tree_to_x86_64(tree_node* root, char* reg, FILE* out, struct compile_info* c_info);
void ast_to_x86_64_core(tree_node* root, std::fstream& out, compile_info& c_info, int body_id, int real_end_id);

/* Get an assembly reference to a variable or a constant
 * The returned char* is entered into an array and is free'd
 * at the end */
std::string asm_from_var_or_const(tree_node* node){
    std::stringstream var_or_const;

    assert(node->get_type() == T_VAR || node->get_type() == T_CONST);

    if(node->get_type() == T_VAR){
        var_or_const << "qword [rbp - " << (dynamic_cast<tree_var*>(node)->get_var_id() + 1) * 8 << "]";
    }else if(node->get_type() == T_CONST){
        var_or_const << dynamic_cast<tree_const*>(node)->get_value();
    }

    return var_or_const.str();
}

void print_mov_if_req(std::string target, std::string source, std::fstream& out){
    if(!(target == source))
        out << "mov " << target << ", " << source << std::endl;
}

/* Parse a tree representing an arithmetic expression into assembly recursively */
void arithmetic_tree_to_x86_64(tree_node* root, std::string reg, std::fstream& out, compile_info& c_info){
    /* If we are only a number: mov us into the target and leave */
    if(root->get_type() == T_VAR || root->get_type() == T_CONST){
        out << "mov " << reg << ", " << asm_from_var_or_const(root) << std::endl << std::endl;
        return;
    }

    assert(root->get_type() == T_ARIT);

    tree_arit* arit = dynamic_cast<tree_arit*>(root);

    assert(arit->left->get_type() == T_ARIT ||
           arit->left->get_type() == T_CONST ||
           arit->left->get_type() == T_VAR);
    assert(arit->right->get_type() == T_ARIT ||
           arit->right->get_type() == T_CONST ||
           arit->right->get_type() == T_VAR);

    bool value_in_rax = false;

    /* If our children are also calculations: recurse */
    if(arit->left->get_type() == T_ARIT){
        arithmetic_tree_to_x86_64(arit->left, "rax", out, c_info);
        value_in_rax = true;
    }if(arit->right->get_type() == T_ARIT){
        /* Preserve rax */
        if(value_in_rax)
            out << "push rax" << std::endl << std::endl;
        arithmetic_tree_to_x86_64(arit->right, "rcx", out, c_info);
        if(value_in_rax)
            out << "pop rax" << std::endl << std::endl;
    }

    /* If our children are numbers: mov them into the target */
    if(arit->left->get_type() == T_CONST || arit->left->get_type() == T_VAR)
        out << "mov rax, " << asm_from_var_or_const(arit->left) << std::endl << std::endl;
    if(arit->right->get_type() == T_CONST || arit->right->get_type() == T_VAR)
        out << "mov rcx, " << asm_from_var_or_const(arit->right) << std::endl << std::endl;

    /* Execute the calculation */
    switch(arit->get_arit()){
        case ADD:
            out << "add rax, rcx" << std::endl;
            print_mov_if_req(reg, "rax", out);
            break;
        case SUB:
            out << "sub rax, rcx" << std::endl;
            print_mov_if_req(reg, "rax", out);
            break;
        case DIV:
            out << "xor rdx, rdx" << std::endl <<
                   "div rcx" << std::endl;
            print_mov_if_req(reg, "rax", out);
            break;
        case MOD:
            out << "xor rdx, rdx" << std::endl <<
                   "div rcx" << std::endl;
            print_mov_if_req(reg, "rdx", out);
            break;
        case MUL:
            out << "xor rdx, rdx" << std::endl <<
                   "mul rcx" << std::endl;
            print_mov_if_req(reg, "rax", out);
            break;
        case ARIT_OPERATION_ENUM_END:
            //TODO: tree line numbers
            c_info.err.error(0, "Invalid arithmetic operation\n");
            break;
    }

    out << std::endl;
}

void ast_to_x86_64(tree_body* root, std::string fn, compile_info& c_info){
    std::fstream out;
    out.open(fn, std::ios::out);

    out << ";; Generated by Least Complicated Compiler (lcc)" << std::endl << std::endl <<
           "global _start" << std::endl <<
           "section .text" << std::endl <<
           "_start:" << std::endl << std::endl;

    if(c_info.known_vars.size() > 0)
        out << "mov rbp, rsp" << std::endl <<
               "sub rsp, " << (c_info.known_vars.size()) * 8 << std::endl;

    ast_to_x86_64_core(dynamic_cast<tree_node*>(root), out, c_info, root->get_body_id(), root->get_body_id());

    out << "mov rax, 60" << std::endl <<
           "xor rdi, rdi" << std::endl <<
           "syscall" << std::endl << std::endl <<
           "section .data" << std::endl;

    for (size_t i = 0; i < c_info.known_string.size(); i++) {
        out << "str" << i << ": db \"" << c_info.known_string[i] << "\"" << std::endl <<
            "str" << i << "Len: equ $ - str" << i << std::endl << std::endl;
    }

    if(c_info.req_libs[LIB_UPRINT])
        out << "extern uprint" << std::endl;
    if(c_info.req_libs[LIB_PUTCHAR])
        out << "extern putchar" << std::endl;

    out.close();
}

void ast_to_x86_64_core(tree_node* root, std::fstream& out, compile_info& c_info, int body_id, int real_end_id){
    c_info.err.set_line(root->get_line());
    switch(root->get_type()){
        case T_BODY:
        {
            tree_body* body = dynamic_cast<tree_body*>(root);
            for(auto child : body->children){
                ast_to_x86_64_core(child, out, c_info, body->get_body_id(), real_end_id);
            }
            break;
        }
        case T_IF:
        {
            tree_if* t_if = dynamic_cast<tree_if*>(root);
            /* Getting the end label for the whole block
             * we jmp there if one if succeeded and we traversed its block */
            tree_node* last_if = get_last_if(t_if);
            if(last_if){
                if(last_if->get_type() == T_ELSE){
                    real_end_id = dynamic_cast<tree_else*>(last_if)->body->get_body_id();
                }else if(last_if->get_type() == T_IF){
                    real_end_id = dynamic_cast<tree_if*>(last_if)->body->get_body_id();
                }
            }

            out << ";; if" << std::endl;
            ast_to_x86_64_core(t_if->condition, out, c_info, t_if->body->get_body_id(), real_end_id);
            ast_to_x86_64_core(t_if->body, out, c_info, t_if->body->get_body_id(), real_end_id);
            /* If we have an elif: jmp there after finishing the block */
            if(t_if->elif != NULL){
                out << "jmp .end" << real_end_id << std::endl << std::endl <<
                       ".end" << t_if->body->get_body_id() << ":" << std::endl << std::endl;
                ast_to_x86_64_core(t_if->elif, out, c_info, t_if->body->get_body_id(), real_end_id);
            }else
                out << ".end" << t_if->body->get_body_id() << ":" << std::endl << std::endl;
            break;
        }
        case T_ELIF:
        {
            tree_if* t_if = dynamic_cast<tree_if*>(root);

            out << ";; elif" << std::endl;
            ast_to_x86_64_core(t_if->condition, out, c_info, t_if->body->get_body_id(), real_end_id);
            ast_to_x86_64_core(t_if->body, out, c_info, t_if->body->get_body_id(), real_end_id);
            /* If we have an elif: jmp there after finishing the block */
            if(t_if->elif != NULL){
                out << "jmp .end" << real_end_id << std::endl << std::endl <<
                       ".end" << t_if->body->get_body_id() << ":" << std::endl << std::endl;
                ast_to_x86_64_core(t_if->elif, out, c_info, t_if->body->get_body_id(), real_end_id);
            }else
                out << ".end" << t_if->body->get_body_id() << ":" << std::endl << std::endl;
            break;
        }
        case T_ELSE:
        {
            tree_else* t_else = dynamic_cast<tree_else*>(root);

            out << ";; else" << std::endl;
            ast_to_x86_64_core(t_else->body, out, c_info, t_else->body->get_body_id(), real_end_id);
            out << ".end" << t_else->body->get_body_id() << ":" << std::endl << std::endl;
            break;
        }
        case T_WHILE:
        {
            tree_while* t_while = dynamic_cast<tree_while*>(root);

            out << ";; while" << std::endl;
            out << ".entry" << t_while->body->get_body_id() << ":" << std::endl << std::endl;

            ast_to_x86_64_core(t_while->condition, out, c_info, t_while->body->get_body_id(), real_end_id);
            ast_to_x86_64_core(t_while->body, out, c_info, t_while->body->get_body_id(), real_end_id);

            out << "jmp .entry" << t_while->body->get_body_id() << std::endl << std::endl;
            out << ".end" << t_while->body->get_body_id() << ":" << std::endl << std::endl;
            break;
        }
        case T_FUNC:
        {
            tree_func* t_func = dynamic_cast<tree_func*>(root);
            //TODO: arit operations as function args
            switch(t_func->get_func()){
                case EXIT:
                {
                    c_info.err.on_true(t_func->args.size() != 1, "Expected one argument to 'exit'\n");
                    c_info.err.on_false(t_func->args[0]->get_type() == T_VAR ||
                                        t_func->args[0]->get_type() == T_CONST,
                                        "Expected variable or constant\n");
                    out << "mov rax, 60" << std::endl;
                    if(t_func->args[0]->get_type() == T_VAR){
                        error_on_undefined(dynamic_cast<tree_var*>(t_func->args[0]), c_info);
                        out << "mov rdi, " << asm_from_var_or_const(t_func->args[0]) << std::endl;
                    }else if(t_func->args[0]->get_type() == T_CONST){
                        out << "mov rdi, " << dynamic_cast<tree_const*>(t_func->args[0])->get_value() << std::endl;
                    }
                    out << "syscall" << std::endl;
                    break;
                }
                case INT:
                {
                    c_info.err.on_true(t_func->args.size() != 2,
                                       "Expected two arguments to 'int'\n");
                    c_info.err.on_false(t_func->args[0]->get_type() == T_VAR,
                                        "Expected variable\n");
                    c_info.err.on_false(t_func->args[1]->get_type() == T_VAR ||
                                        t_func->args[1]->get_type() == T_CONST,
                                        "Expected variable or constant\n");
                    if(t_func->args[1]->get_type() == T_VAR){
                        error_on_undefined(dynamic_cast<tree_var*>(t_func->args[1]), c_info);
                    }
                    c_info.err.on_true(c_info.known_vars[dynamic_cast<tree_var*>(t_func->args[0])->get_var_id()].second,
                                       "Redefinition of '%s', use 'set' instead\n",
                                       c_info.known_vars[dynamic_cast<tree_var*>(t_func->args[0])->get_var_id()].first.c_str());

                    out << "mov qword [rbp - " <<
                        (dynamic_cast<tree_var*>(t_func->args[0])->get_var_id() + 1) * 8 << "], " <<
                        asm_from_var_or_const(t_func->args[1]) << std::endl;

                    c_info.known_vars[dynamic_cast<tree_var*>(t_func->args[0])->get_var_id()].second = true;
                    break;
                }
                case PRINT:
                {
                    c_info.err.on_true(t_func->args.size() != 1,
                                       "Expected one argument to 'print'\n");
                    c_info.err.on_false(t_func->args[0]->get_type() == T_LSTR,
                                        "Expected string\n");

                    tree_lstr* ls = dynamic_cast<tree_lstr*>(t_func->args[0]);

                    for(auto format : ls->format){
                        switch(format->get_type()){
                            case T_STR:
                            {
                                tree_str* str = dynamic_cast<tree_str*>(format);

                                out << "mov rax, 1" << std::endl <<
                                       "mov rdi, 1" << std::endl <<
                                       "mov rsi, str" << str->get_str_id() << std::endl <<
                                       "mov rdx, str" << str->get_str_id() << "Len" << std::endl <<
                                       "syscall" << std::endl;
                                break;
                            }
                            case T_VAR:
                            case T_CONST:
                            {
                                out << "mov rax, " << asm_from_var_or_const(format) << std::endl <<
                                       "call uprint" << std::endl;
                                c_info.req_libs[LIB_UPRINT] = true;
                                break;
                            }
                            default:
                                c_info.err.error("Unexpected format token in string\n");
                        }
                    }
                    break;
                }
                case SET:
                {
                    c_info.err.on_true(t_func->args.size() != 2,
                                       "Expected two arguments to 'set'\n");

                    c_info.err.on_false(t_func->args[0]->get_type() == T_VAR,
                                        "Expected variable\n");
                    error_on_undefined(dynamic_cast<tree_var*>(t_func->args[0]), c_info);

                    switch(t_func->args[1]->get_type()){
                        case T_ARIT:
                            out << ";; set" << std::endl;
                            arithmetic_tree_to_x86_64(t_func->args[1], "r8", out, c_info);
                            out << "mov " << asm_from_var_or_const(t_func->args[0]) << ", r8" << std::endl;
                            break;
                        case T_VAR:
                            error_on_undefined(dynamic_cast<tree_var*>(t_func->args[1]), c_info);
                            __attribute__ ((fallthrough)); /* Tell gcc (and you) that we are willing to fall through here */
                        case T_CONST:
                            out << ";; set" << std::endl <<
                                "mov " << asm_from_var_or_const(t_func->args[0]) <<
                                ", " << asm_from_var_or_const(t_func->args[1]) << std::endl;
                            break;
                        default:
                            c_info.err.error("Unexpected argument to set");
                    }
                    break;
                }
                case PUTCHAR:
                case READ:
                    c_info.err.error(0, "TODO: unimplemented\n");
                    break;
            }
            out << std::endl;
            break;
        }
        case T_CMP:
        {
            tree_cmp* cmp = dynamic_cast<tree_cmp*>(root);

            arithmetic_tree_to_x86_64(cmp->left, "r8", out, c_info);
            if(cmp->right){
                arithmetic_tree_to_x86_64(cmp->right, "r9", out, c_info);
                out << "cmp r8, r9" << std::endl <<
                    cmp_operation_structs[cmp->get_cmp()].opposite_asm_name << " .end" << body_id << std::endl;
            /* If we are not comparing something: just check against one */
            }else{
                out << "cmp r8, 1" << std::endl <<
                    cmp_operation_structs[EQUAL].opposite_asm_name << " .end" << body_id << std::endl;
            }

            break;
        }
        default:
            c_info.err.error("Unexpected tree node\n");
            break;
    }
}
